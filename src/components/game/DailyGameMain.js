import React, { useState, useEffect, useCallback, useRef } from "react";
import "./DailyGameMain.css";
import PixelModal from "./PixelModal";

// ÏãùÏû¨Î£å Ï†ïÎ≥¥Î•º Îã¥ÏùÄ Î∞∞Ïó¥ - ÌîΩÏÖÄ ÏïÑÌä∏ ÌÖåÎßàÏóê ÎßûÎäî ÏÉâÏÉÅÏúºÎ°ú ÏàòÏ†ï
const foodIngredients = [
  { id: 1, name: "ÌÜ†ÎßàÌÜ†", color: "#d95763", emoji: "üçÖ" },
  { id: 2, name: "ÏñëÌåå", color: "#df7126", emoji: "üßÖ" },
  { id: 3, name: "ÎãπÍ∑º", color: "#fc9838", emoji: "ü•ï" },
  { id: 4, name: "Í∞êÏûê", color: "#8f563b", emoji: "ü•î" },
  { id: 5, name: "Î≤ÑÏÑØ", color: "#c0c0c0", emoji: "üçÑ" },
  { id: 6, name: "Ìåå", color: "#63c74d", emoji: "üßÑ" },
  { id: 7, name: "Í≥ÑÎûÄ", color: "#feae34", emoji: "ü•ö" },
  { id: 8, name: "Î∞•", color: "#f4f4f4", emoji: "üçö" },
  { id: 9, name: "ÏÜåÍ≥†Í∏∞", color: "#be4a2f", emoji: "ü•©" },
  { id: 10, name: "ÏπòÏ¶à", color: "#fee761", emoji: "üßÄ" },
  { id: 11, name: "ÎßàÎäò", color: "#e8e8e8", emoji: "üßÑ" },
  { id: 12, name: "Î∏åÎ°úÏΩúÎ¶¨", color: "#2ce8f5", emoji: "ü•¶" },
  { id: 13, name: "Í≥†Ï∂î", color: "#c0271b", emoji: "üå∂Ô∏è" },
  { id: 14, name: "Ïò§Ïù¥", color: "#3db01c", emoji: "ü•í" },
  { id: 15, name: "ÏÉùÏÑ†", color: "#88abdb", emoji: "üêü" },
];

/**
 * ÌîΩÏÖÄ ÏïÑÌä∏ Ïä§ÌÉÄÏùºÏùò Ïπ¥Îìú Îí§ÏßëÍ∏∞ Í≤åÏûÑ Ïª¥Ìè¨ÎÑåÌä∏
 * @param {Object} props - Ïª¥Ìè¨ÎÑåÌä∏ ÏÜçÏÑ±
 * @param {Function} props.onGameExit - Í≤åÏûÑ Ï¢ÖÎ£å Ïãú Ìò∏Ï∂úÌï† Ìï®Ïàò
 * @param {Function} props.onEarnFood - ÏÇ¨Î£å ÌöçÎìù Ïãú Ìò∏Ï∂úÌï† Ìï®Ïàò
 * @returns {JSX.Element} Ïπ¥Îìú Îí§ÏßëÍ∏∞ Í≤åÏûÑ Ïª¥Ìè¨ÎÑåÌä∏
 */
const DailyGameMain = ({ onGameExit, onEarnFood }) => {
  // Í≤åÏûÑÏóê ÏÇ¨Ïö©Îê† Ïπ¥ÎìúÎì§Ïùò ÏÉÅÌÉú
  const [cards, setCards] = useState([]);
  // ÌòÑÏû¨ ÏÑ†ÌÉùÎêú Ïπ¥ÎìúÎì§
  const [flippedCards, setFlippedCards] = useState([]);
  // Ïù¥ÎØ∏ ÏßùÏùÑ ÎßûÏ∂ò Ïπ¥ÎìúÎì§
  const [matchedPairs, setMatchedPairs] = useState([]);
  // Í≤åÏûÑ ÏãúÏûë ÏãúÍ∞Ñ
  const [startTime, setStartTime] = useState(null);
  // Í≤åÏûÑ Ï¢ÖÎ£å ÏãúÍ∞Ñ
  const [endTime, setEndTime] = useState(null);
  // ÏãúÎèÑ ÌöüÏàò
  const [moves, setMoves] = useState(0);
  // ÌòÑÏû¨ Í≤åÏûÑ Î†àÎ≤® (1~5)
  const [currentLevel, setCurrentLevel] = useState(1);
  // ÎàÑÏ†Å Î≥¥ÏÉÅ (ÏÇ¨Î£å Í∞úÏàò)
  const [totalReward, setTotalReward] = useState(0);
  // Î†àÎ≤® ÏôÑÎ£å ÏÉÅÌÉú
  const [levelCompleted, setLevelCompleted] = useState(false);
  // Í≤åÏûÑ Î°úÎî© ÏÉÅÌÉú
  const [isLoading, setIsLoading] = useState(true);
  // Îí§ÏßëÍ∏∞ ÏûëÏóÖ Ï§ë ÏÉÅÌÉú
  const isFlipping = useRef(false);

  // Î™®Îã¨ ÏÉÅÌÉú Í¥ÄÎ¶¨
  const [modalConfig, setModalConfig] = useState({
    isOpen: false,
    title: "",
    message: "",
    buttons: [],
  });

  // Î™®Îã¨ Îã´Í∏∞ Ìï®Ïàò
  const closeModal = () => {
    setModalConfig({
      isOpen: false,
      title: "",
      message: "",
      buttons: [],
    });
  };

  // Í≤åÏûÑ Ï¥àÍ∏∞Ìôî Ìï®Ïàò
  const initializeGame = useCallback(
    (resetLevel = false) => {
      // Î°úÎî© ÏÉÅÌÉú ÏÑ§Ï†ï
      setIsLoading(true);

      // Î†àÎ≤®ÏùÑ Î¶¨ÏÖãÌïòÎ†§Î©¥ 1Î°ú ÏÑ§Ï†ï, ÏïÑÎãàÎ©¥ ÌòÑÏû¨ Î†àÎ≤® Ïú†ÏßÄ
      if (resetLevel) {
        setCurrentLevel(1);
        setTotalReward(0);
      }

      // ÌòÑÏû¨ Î†àÎ≤®Ïóê Îî∞Îùº Ïπ¥Îìú Ïåç Í∞úÏàò Ï°∞Ï†ï (Î†àÎ≤®Î≥Ñ ÌñâÍ≥º Ïó¥ ÏßÄÏ†ï)
      const levelPairs = {
        1: 3, // Î†àÎ≤® 1: 6Ïû• (3Ïåç) - 3Ìñâ 2Ïó¥
        2: 4, // Î†àÎ≤® 2: 8Ïû• (4Ïåç) - 4Ìñâ 2Ïó¥
        3: 8, // Î†àÎ≤® 3: 16Ïû• (8Ïåç) - 4Ìñâ 4Ïó¥
        4: 10, // Î†àÎ≤® 4: 20Ïû• (10Ïåç) - 5Ìñâ 4Ïó¥
        5: 12, // Î†àÎ≤® 5: 24Ïû• (12Ïåç) - 6Ìñâ 4Ïó¥
      };

      const pairsForLevel = levelPairs[currentLevel];

      // ÎÇúÏù¥ÎèÑÏóê ÎßûÍ≤å ÏãùÏû¨Î£å ÏÑ†ÌÉù Î∞è ÏÑûÍ∏∞
      const shuffledIngredients = [...foodIngredients]
        .sort(() => Math.random() - 0.5)
        .slice(0, pairsForLevel);

      // Í∞Å ÏãùÏû¨Î£åÎßàÎã§ Îëê Ïû•Ïùò Ïπ¥ÎìúÎ•º ÎßåÎì§Ïñ¥ Î∞∞Ïó¥Ïóê Ï∂îÍ∞Ä
      let newCards = [];
      shuffledIngredients.forEach((ingredient) => {
        // Ï≤´ Î≤àÏß∏ Ïπ¥Îìú
        newCards.push({
          id: ingredient.id * 2 - 1,
          ingredientId: ingredient.id,
          name: ingredient.name,
          color: ingredient.color,
          emoji: ingredient.emoji,
          isFlipped: false,
          isMatched: false,
        });

        // Îëê Î≤àÏß∏ Ïπ¥Îìú (Ïßù)
        newCards.push({
          id: ingredient.id * 2,
          ingredientId: ingredient.id,
          name: ingredient.name,
          color: ingredient.color,
          emoji: ingredient.emoji,
          isFlipped: false,
          isMatched: false,
        });
      });

      // Ïπ¥Îìú ÏÑûÍ∏∞
      newCards.sort(() => Math.random() - 0.5);

      // ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
      setCards(newCards);
      setFlippedCards([]);
      setMatchedPairs([]);
      setMoves(0);
      setStartTime(Date.now());
      setEndTime(null);
      setLevelCompleted(false);

      // Ïπ¥ÎìúÎ•º ÏÉùÏÑ±Ìïú ÌõÑ Î°úÎî© ÏÉÅÌÉú Ìï¥Ï†ú
      setTimeout(() => {
        setIsLoading(false);
      }, 800); // Í∞ÑÎã®Ìïú Î°úÎî© Ìö®Í≥ºÎ•º ÏúÑÌïú ÏßÄÏó∞ ÏãúÍ∞Ñ
    },
    [currentLevel]
  );

  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú Í≤åÏûÑ Ï¥àÍ∏∞Ìôî
  useEffect(() => {
    initializeGame(true);
  }, []);

  // Ïπ¥Îìú ÌÅ¥Î¶≠ Ï≤òÎ¶¨ Ìï®Ïàò
  const handleCardClick = (id) => {
    // Î°úÎî© Ï§ëÏù¥Í±∞ÎÇò Îí§ÏßëÎäî Ï§ëÏù¥Î©¥ ÌÅ¥Î¶≠ Î¨¥Ïãú
    if (isLoading || isFlipping.current) return;

    // Ïù¥ÎØ∏ ÏßùÏùÑ ÎßûÏ∂ò Ïπ¥ÎìúÍ±∞ÎÇò, Ïù¥ÎØ∏ Îí§ÏßëÌòÄ ÏûàÎäî Ïπ¥ÎìúÎäî Î¨¥Ïãú
    if (
      matchedPairs.includes(id) ||
      flippedCards.includes(id) ||
      flippedCards.length >= 2
    ) {
      return;
    }

    // Îí§ÏßëÍ∏∞ ÏûëÏóÖ Ï§ë ÏÉÅÌÉú ÏÑ§Ï†ï
    isFlipping.current = true;

    // Ïπ¥Îìú Îí§ÏßëÍ∏∞
    const newFlippedCards = [...flippedCards, id];
    setFlippedCards(newFlippedCards);

    // Îëê Ïû•Ïùò Ïπ¥ÎìúÍ∞Ä ÏÑ†ÌÉùÎêú Í≤ΩÏö∞
    if (newFlippedCards.length === 2) {
      // ÏãúÎèÑ ÌöüÏàò Ï¶ùÍ∞Ä
      setMoves(moves + 1);

      // ÏÑ†ÌÉùÎêú Îëê Ïπ¥Îìú Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
      const firstCard = cards.find((card) => card.id === newFlippedCards[0]);
      const secondCard = cards.find((card) => card.id === newFlippedCards[1]);

      // Îëê Ïπ¥ÎìúÏùò ÏãùÏû¨Î£åÍ∞Ä Í∞ôÏùÄÏßÄ ÌôïÏù∏ (Ïßù ÎßûÏ∂îÍ∏∞)
      if (firstCard.ingredientId === secondCard.ingredientId) {
        // ÏßùÏùÑ ÎßûÏ∂ò Í≤ΩÏö∞
        const newMatchedPairs = [...matchedPairs, firstCard.id, secondCard.id];
        setMatchedPairs(newMatchedPairs);
        setFlippedCards([]);
        isFlipping.current = false;

        // Î™®Îì† Ïπ¥ÎìúÏùò ÏßùÏùÑ ÎßûÏ∑ÑÎäîÏßÄ ÌôïÏù∏
        if (newMatchedPairs.length === cards.length) {
          // Í≤åÏûÑ Ï¢ÖÎ£å
          setEndTime(Date.now());

          // ÌòÑÏû¨ Î†àÎ≤®Ïóê Ìï¥ÎãπÌïòÎäî Î≥¥ÏÉÅ ÏßÄÍ∏â
          const levelReward = currentLevel;
          const newTotalReward = totalReward + levelReward;
          setTotalReward(newTotalReward);

          // Î∂ÄÎ™® Ïª¥Ìè¨ÎÑåÌä∏Ïóê Î≥¥ÏÉÅ Ï†ÑÎã¨ (ÏûàÎã§Î©¥)
          if (onEarnFood) {
            onEarnFood(levelReward);
          }

          // Î†àÎ≤® ÌÅ¥Î¶¨Ïñ¥ ÌëúÏãú
          setLevelCompleted(true);
        }
      } else {
        // ÏßùÏù¥ ÎßûÏßÄ ÏïäÎäî Í≤ΩÏö∞, Ïû†Ïãú ÌõÑ Ïπ¥ÎìúÎ•º Îã§Ïãú Îí§ÏßëÍ∏∞
        setTimeout(() => {
          setFlippedCards([]);
          isFlipping.current = false;
        }, 800);
      }
    } else {
      // Ï≤´ Î≤àÏß∏ Ïπ¥ÎìúÎßå Îí§ÏßëÏùÄ Í≤ΩÏö∞, Îí§ÏßëÍ∏∞ ÏûëÏóÖ ÏôÑÎ£å
      isFlipping.current = false;
    }
  };

  // Îã§Ïùå Î†àÎ≤®Î°ú ÏßÑÌñâÌïòÎäî Ìï®Ïàò
  const goToNextLevel = () => {
    if (currentLevel < 5) {
      // Îã§Ïùå Î†àÎ≤®Î°ú ÏÑ§Ï†ï
      const nextLevel = currentLevel + 1;
      setCurrentLevel(nextLevel);

      // Îã§Ïùå Î†àÎ≤® ÏãúÏûë Ï†ÑÏóê Î™®Îã¨ Îã´Í∏∞
      setEndTime(null);
      setLevelCompleted(false);
    }
  };

  // Í≤åÏûÑ ÏôÑÏ†Ñ Ïû¨ÏãúÏûë Ìï®Ïàò
  const restartFullGame = () => {
    // Í≤åÏûÑ Ïû¨ÏãúÏûë ÌôïÏù∏ Î™®Îã¨ (ÏòµÏÖò)
    setModalConfig({
      isOpen: true,
      title: "Í≤åÏûÑ Ïû¨ÏãúÏûë",
      message:
        "Ï†ïÎßê Ï≤òÏùåÎ∂ÄÌÑ∞ Îã§Ïãú ÏãúÏûëÌïòÏãúÍ≤†ÏäµÎãàÍπå?\nÎ™®Îì† ÏßÑÌñâ ÏÉÅÌô©Ïù¥ Ï¥àÍ∏∞ÌôîÎê©ÎãàÎã§.",
      buttons: [
        {
          text: "Ïû¨ÏãúÏûë",
          onClick: () => {
            closeModal();
            initializeGame(true);
          },
          type: "primary",
        },
        { text: "Ï∑®ÏÜå", onClick: () => closeModal(), type: "secondary" },
      ],
    });
  };

  // Í≤åÏûÑ ÎÇòÍ∞ÄÍ∏∞ Ìï®Ïàò
  const exitGame = () => {
    if (onGameExit) {
      onGameExit(totalReward);
    }
  };

  // Î†àÎ≤®Ïù¥ Î≥ÄÍ≤ΩÎêòÎ©¥ Í≤åÏûÑ Ïû¨ÏãúÏûë
  useEffect(() => {
    if (currentLevel > 0) {
      initializeGame(false);
    }
  }, [currentLevel, initializeGame]);

  // Í≤ΩÍ≥º ÏãúÍ∞Ñ Í≥ÑÏÇ∞
  const getElapsedTime = () => {
    if (!startTime) return "00:00";

    const elapsed = endTime ? endTime - startTime : Date.now() - startTime;
    const seconds = Math.floor(elapsed / 1000);
    const minutes = Math.floor(seconds / 60);

    return `${minutes.toString().padStart(2, "0")}:${(seconds % 60)
      .toString()
      .padStart(2, "0")}`;
  };

  // Î†àÎ≤® Îã®Í≥Ñ Î†åÎçîÎßÅ
  const renderLevelSteps = () => {
    return Array.from({ length: 5 }).map((_, index) => (
      <div
        key={index}
        className={`level-step ${index + 1 <= currentLevel ? "active" : ""}`}
      >
        {index + 1}
      </div>
    ));
  };

  // Î°úÎî© ÌôîÎ©¥ Î†åÎçîÎßÅ
  const renderLoading = () => (
    <div className="loading-container pixel-font">
      <div className="loading-text pixel-font">
        LOADING LEVEL {currentLevel}...
      </div>
      <div className="loading-dots">
        <div className="loading-dot"></div>
        <div className="loading-dot"></div>
        <div className="loading-dot"></div>
      </div>
    </div>
  );

  return (
    <div className="daily-game-main-container pixel-font">
      {/* Í≤åÏûÑ Ï†ïÎ≥¥ Î∞è Ïª®Ìä∏Î°§ */}
      <div className="game-info">
        <h2 className="pixel-font">LEVEL {currentLevel}/5</h2>
        <div className="level-progress">{renderLevelSteps()}</div>
        <div className="reward-info">
          <h3 className="pixel-font-kr">ÎàÑÏ†Å Î≥¥ÏÉÅ: üê± ÏÇ¨Î£å x {totalReward}</h3>
        </div>
      </div>

      <div className="game-controls">
        <button onClick={restartFullGame} className="restart-btn pixel-font">
          RESTART
        </button>
        <button onClick={exitGame} className="exit-btn pixel-font">
          EXIT
        </button>
      </div>

      {/* Î°úÎî© ÏÉÅÌÉúÏóê Îî∞Îùº Î°úÎî© ÌôîÎ©¥ ÎòêÎäî Ïπ¥Îìú Í∑∏Î¶¨Îìú ÌëúÏãú */}
      {isLoading ? (
        renderLoading()
      ) : (
        <div className={`card-grid level-${currentLevel}`}>
          {cards.map((card) => (
            <div
              key={card.id}
              onClick={() => handleCardClick(card.id)}
              className={`card ${
                flippedCards.includes(card.id) || matchedPairs.includes(card.id)
                  ? "flipped"
                  : ""
              } ${matchedPairs.includes(card.id) ? "matched" : ""}`}
            >
              <div className="card-inner">
                {/* Ïπ¥Îìú ÏïûÎ©¥ (Îí§ÏßëÌòîÏùÑ Îïå) */}
                <div
                  className="card-front"
                  style={{ backgroundColor: card.color }}
                >
                  <div className="card-icon">
                    <span>{card.emoji}</span>
                  </div>
                  <p className="card-name pixel-font">{card.name}</p>
                </div>

                {/* Ïπ¥Îìú Îí∑Î©¥ */}
                <div className="card-back">
                  <div className="card-question">?</div>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Í≤åÏûÑ ÏôÑÎ£å Î™®Îã¨ */}
      {endTime && (
        <div className="modal-overlay">
          <div className="game-complete pixel-font">
            <h2 className="pixel-font-kr">LEVEL {currentLevel} CLEAR!</h2>
            <p className="pixel-font-kr">Ï¥ù ÏãúÎèÑ ÌöüÏàò: {moves}Ìöå</p>
            <p className="pixel-font-kr">ÏÜåÏöî ÏãúÍ∞Ñ: {getElapsedTime()}</p>
            <p className="reward-earned pixel-font-kr">
              Î≥¥ÏÉÅ ÌöçÎìù: üê± ÏÇ¨Î£å x {currentLevel}
            </p>

            {currentLevel < 5 ? (
              <button
                onClick={goToNextLevel}
                className="next-level-btn pixel-font"
              >
                NEXT LEVEL
              </button>
            ) : (
              <div className="game-finished">
                <h3 className="pixel-font-kr">ALL LEVELS CLEAR!</h3>
                <p className="pixel-font-kr">
                  Ï∂ïÌïòÌï©ÎãàÎã§! Î™®Îì† Î†àÎ≤®ÏùÑ ÌÅ¥Î¶¨Ïñ¥ÌñàÏäµÎãàÎã§!
                </p>
                <div className="game-finished-buttons">
                  <button
                    onClick={restartFullGame}
                    className="restart-btn pixel-font"
                  >
                    RESTART
                  </button>
                  <button
                    onClick={exitGame}
                    className="exit-game-btn pixel-font"
                  >
                    EXIT
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      {/* ÌîΩÏÖÄ Ïä§ÌÉÄÏùº Î™®Îã¨ */}
      <PixelModal
        isOpen={modalConfig.isOpen}
        title={modalConfig.title}
        message={modalConfig.message}
        buttons={modalConfig.buttons}
        onClose={closeModal}
      />
    </div>
  );
};

export default DailyGameMain;
